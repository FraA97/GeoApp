                           --------------------------
                           ||API SERVER MULTIPLAYER||
                           --------------------------

CREATE a game and UPDATE READY STATE OF A PLAYER:
    parameters(5): 
                - req=0 
                - random = 0 (no random game) or = 1 (random game) for start a game with a random player.
                - user_name (String)
                - game_id ( the game id of the game generated by another player)
                - num_levels (number sended by game master for communicate to the server (and then to the adversary) the number of levels of the game created)
    
    example:
        -127.0.0.1:5000/?req=0&user_name="prova"&game_id="1000"    //NO MASTER PLAYER REQUEST AND NO RANDOM GAME(game_id obtained by the MASTER player)
        -127.0.0.1:5000/?req=0&random=1&user_name="prova"&&num_levels=3    //MASTER PLAYER REQUEST FOR A RANDOM GAME
            
    results:
        return:
            - error (true or false)
            - msg (for clarify the response) 
            - game_id 
            - player_id (assigned player id) 
            - num_levels (number of levels decided by master player. Only if request performed by an non master player. )
------------------------------------------------------------------------            
READ (verify) if other players are ready (POLLING)
    parameters(2): 
        -req=1 
        -game_id = number returned in the CREATE GAME req
    example:
        -127.0.0.1:5000/?req=1&game_id=1000 
    results:
        return:
            - error (true or false)
            - msg (for clarify the response) 
            - num_sync_pl (the number of players that are ready )
            - num_pl_left (the number of players that  left the game)
            - name_player (username of all players in the game)
------------------------------------------------------------------------
CREATE AND READ ANSWERS TO START TO PLAY:
    parameters(4): 
        - req=2 
        - game_id = id of the game 
        - player_id= id of the player in that game
        - level = current level of the game 
    example:
        -127.0.0.1:5000/?req=2&game_id=num.&player_id=num.

    results:
        return:
            - error (true or false)
            - msg (for clarify the response) 

            if ERROR = FALSE:
            -country ( the random country found of the true answer)
            -city ( the random city found of the true answer)
            - lat (the latitude of the random  place found)
            - long (the longitude of the random  place found)
            - fCountry1 (a "random" country that not correspond to the true answer country)
            - fCity1 (a "random" city that not correspond to the true answer city)
            - fCountry2 (a "random" country that not correspond to the true answer country)
            - fCity2 (a "random" city that not correspond to the true answer city)
            - fCountry3 (a "random" country that not correspond to the true answer country)
            - fCity3 (a "random" city that not correspond to the true answer city)
            
            //if(request done for the first time by second player (no master player))
                //return: error= true, msg="wait the other player"
            //else:
                return the three false responses + the true response
-----------------------------------------------------------------------
UPDATE the number of players that have finished the level:
    parameters(4): 
        - req=3
        - game_id= id of the game
        - user_name = username of the player
        - score = current score of user_name in the current game

    example:
        -127.0.0.1:5000/?req=3&game_id=1000&user_name="prova"&score=2 //notify to the server that the player has finished the level
    
    results:
        return:
            -error (true or false)
            - msg (for clarify the response)
            - game_id (the id of the game)
            - number of players to wait (number of players that MASTER player must wait for start the new level or end the game)
----------------------------------------------------------------------

READ if the other players has finished the level? (POLLING) - WAITING STATE
    
    parameters(2):
        -req = 4
        -game_id = the id of the game

    example:
        -27.0.0.1:5000/?req=4&game_id=1000

    results:
        return:
            -error (true or false)
            - msg (for clarify the response)
            -waiting = (true || false    //if true then wait that adversaries finish the level  // else all adversaries has finished)=>
            -total_score (scores of all players in the game)
            -num_pl_left (number of players that have abandoned the game)
            -master_pl_left (true if master player has left the game, Else = false)
---------------------------------------------------------------------
DELETE (request sended when a player leave the game for notify it to other players) - INTERRUPT_STATE

    parameters(5):
        - req = 5
        - game_id = id of the game
        - player_id = id of the player
        - interrupt = 1
        - user_name = a username

    example:
        -27.0.0.1:5000/?req=5&game_id=1000&player_id=1&interrupt=1&user_name="prova"

    results:
        return:
            -error (true or false)
            - msg (for clarify the response)
---------------------------------------------------------------------
DELETE (remove game data structures when game end)

    parameters(2):
        - req = 6
        - game_id = id of the game
    
    example:
        -27.0.0.1:5000/?req=5&game_id=1000

    results:
        return:
            -error (true or false)
            - msg (for clarify the response


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
                          ---------------------------
                          ||API SERVER SINGLEPLAYER||
                          ---------------------------

-CREATE and READ A NEW TRUE ANSWER(lat and long of a random city):
    parameters(1): - req=0 
                    
    example:
            127.0.0.1:5000/?req=0
                
        results:
            return:
                - error (true or false)
                - msg (for clarify the response="return true answer") 
                - lat (the latitude of the random  place found)
                - long (the longitude of the random  place found)
                - responseCountry (the name of the country of lat and long returned)
                - responseCity (the name of the city of lat and long returned)
---------------------------------------------
-CREATE AND READ OTHER 3 FALSE ANSWERS(3 random city and respective countries):
    parameters(3): 
                - req=1
                - country = a string
                - city = a string 
                    
    example:
            127.0.0.1:5000/?req=1
                
        results:
            return:
                - error (true or false)
                - msg (for clarify the response) 
                - fCountry1 (a "random" country that not correspond to the true answer country)
                - fCity1 (a "random" city that not correspond to the true answer city)
                - fCountry2 (a "random" country that not correspond to the true answer country)
                - fCity2 (a "random" city that not correspond to the true answer city)
                - fCountry3 (a "random" country that not correspond to the true answer country)
                - fCity3 (a "random" city that not correspond to the true answer city)