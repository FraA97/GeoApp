API SERVER:

CREATE A GAME:
    parameters: - req=0 
                - random = 0 (no random game) or = 1 (random game) for start a game with a random player.
                - user_name (String)
                - game_id ( the game id of game generated by another player)
                - num_levels (number sended by game master for communicate to the server (and then to the adversary) the number of levels of the game created)
    
    example:
        127.0.0.1:5000/?req=0&user_name&game_id='number'&num_levels=3   //game_id obtained by the other player
        127.0.0.1:5000/?req=0&random=1                                  //random = true
            
    results:
        return:
            - error (true or false)
            - msg (for clarify the response) 
            - game_id 
            - assigned player_id (0, 1, 2, ...) 
            - num_levels (number of levels decided by master player)
------------------------------------------------------------------------            

verify if other player (random or not) is ready (POLLING)
    parameters: req=1 + game_id = number returned in the first req
    127.0.0.1:5000/?req=1&game_id=num. 
        return waiting = true || false    //if true then wait the adversary
                                         // else adversary is in!!!

start to play:
    parameters: req=2 + game_id = number +player_id=number  (returned in the first req)
    127.0.0.1:5000/?req=2&game_id=num.&player_id=num.
            //if(request done for the first time by second player (no master player))
                //return: error= true, msg="wait the other player"
            //else:
                return the three false responses + the true response

finished the level:
    parameters: req=3 + game_id=num.
    127.0.0.1:5000/?req=3&game_id=num. //notify to the server that the player has finished the level
        set a variable to false if this req. arrives 2 times for the same game_id
        return msg: "level completed" + game_id

the other player has finished the level? (POLLING)
    27.0.0.1:5000/?req=4&game_id=num.
        return waiting = true || false    //if true then wait that adversary finish the level
                                         // else adversary has finished!!

send new request: 127.0.0.1:5000/?req=2&game_id=num.&player_id=num. and so on...